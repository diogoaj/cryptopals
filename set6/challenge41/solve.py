""" Implement unpadded message recovery oracle """

from binascii import hexlify, unhexlify
import gmpy2

class RSA:
	def __init__(self, primes):
		self.p = primes[0]
		self.q = primes[1]
		
		self.n = self.p*self.q
		self.phi = (self.p-1)*(self.q-1)

		self.e = 65537
		self.d = gmpy2.invert(self.e, self.phi)

	def encrypt(self, m):
		return pow(m, self.e, self.n)

	def decrypt(self, c):
		return pow(c, self.d, self.n)

if __name__ == "__main__":
	gmpy2.get_context().precision = 8000

	primes = [30002754019704757557704669638439818914586783279134589468420036481102352427427467980323037625803050320676617366340142729335282904072785557390379870247405833432554050834048745003510363481580682190774428237974383206559804176682203778789834645879963731857034394014327957384660838255483513517910960211164589920610425998661315669400273111981133335094146320641407523553916121825186459624306932090098434011110030686194889789487369426126096188535314445085789208661359506827439200799895457028097786919160045362097775840386197085981088880090614620634960814537430939102825477149587682850102924370108642480671955921489221041983209,
			  30263925796144376010297458611444678587891796139885744243576775568198923119308726072515937121298016192783262621448001001753674561427198565146278290415115935228700696144678339002897761358281932780955424020297594177831504467280118108278992442126181390703404897114622355192351145709842292680875376309319342167542933408392818636542215758932523622482273767304401383297387828702421439170710579073029973769927808080223462384535319276254554000011314354924075652045169939253557909000829528422708042133863394804538427010108460586749127830633127494068838793271378184006233305946926627099921417360254101661437137492242157915253467]

	rsa = RSA(primes)

	m = int(hexlify(b"break_chall_41").decode(), 16)
	c = rsa.encrypt(m)

	crafted_c = (pow(2, rsa.e, rsa.n)*c) % rsa.n

	# Send crafted cipher to oracle do decrypt
	dec = rsa.decrypt(crafted_c)

	i = gmpy2.invert(2, rsa.n)

	print (m == dec*i % rsa.n)